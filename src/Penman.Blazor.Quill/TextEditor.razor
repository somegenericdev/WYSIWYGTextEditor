@using Penman.Blazor.Quill.Internal
@using System
@inject IJSRuntime JsRuntime

@namespace Penman.Blazor.Quill
<div id="@_editorContainerId">
    <div @ref="@_toolBar" id="@_generatedToolBarId" class="@CalculateToolBarClass(Toolbar)">
        @if (Toolbar != null)
        {
            <CascadingValue Value="Toolbar">
                <CascadingValue Value="Fonts">
                    <ToolbarContentComposer></ToolbarContentComposer>
                </CascadingValue>
            </CascadingValue>
        }
        @ToolbarContent
    </div>
    <div id="editor" @ref="@_quillElement">
        @EditorContent
    </div>
</div>

@code {
    [Parameter]
    public Toolbar Toolbar { get; set; }
    [Parameter]
    public List<string> Fonts { get; set; }

    [Parameter]
    public bool StickyToolBar { get; set; } = false;

    [Parameter]
    public RenderFragment EditorContent { get; set; }

    [Parameter]
    public RenderFragment ToolbarContent { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
        = false;

    [Parameter]
    public string Placeholder { get; set; }
        = "Compose an epic...";

    [Parameter]
    public EditorTheme Theme { get; set; } = EditorTheme.Snow;

    [Parameter]
    public bool ImageServerUploadEnabled { get; set; } = false;

    [Parameter, EditorRequired]
    public string ImageServerUploadUrl { get; set; }

    [Parameter]
    public string DebugLevel { get; set; }
        = "info";

    private ElementReference _quillElement;
    private ElementReference _toolBar;
    private string _scrollEventId = null;
    private ElementReference _scrollToView;
    private ElementReference _log;
    private string _logMessage;
    private double _pageScrolledY;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (ImageServerUploadEnabled && string.IsNullOrEmpty(ImageServerUploadUrl))
        {
            throw new ArgumentNullException($"You cannot set the ImageServerUploadEnabled parameter without providing the ImageServerUploadUrl parameter.");
        }
    }


    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {


            await Interop.CreateQuill(
                JsRuntime,
                _quillElement,
                _toolBar,
                ReadOnly,
                Placeholder,
                Theme.ToString().ToLower(),
                DebugLevel,
                _editorContainerId,
                ImageServerUploadEnabled,
                ImageServerUploadUrl,
                Fonts);
        }

        await ScrollEventHandler();
    }

    private async Task ScrollEventHandler()
    {
        if (StickyToolBar)
        {
            await Interop.ConfigureStickyToolbar(JsRuntime, _toolBar);
        }
    }

    public async Task<string> GetText()
    {
        return await Interop.GetText(
            JsRuntime, _quillElement);
    }

    public async Task<string> GetHtml()
    {
        return await Interop.GetHtml(
            JsRuntime, _quillElement);
    }

    public async Task<string> GetContent()
    {
        return await Interop.GetContent(
            JsRuntime, _quillElement);
    }

    public async Task LoadContent(string content)
    {
        await Interop.LoadQuillContent(
            JsRuntime, _quillElement, content);
    }

    public async Task LoadHtmlContent(string quillHtmlContent)
    {
        await Interop.LoadQuillHtmlContent(
            JsRuntime, _quillElement, quillHtmlContent);
    }

    public async Task InsertImage(string imageUrl)
    {
        await Interop.InsertQuillImage(
            JsRuntime, _quillElement, imageUrl);
    }

    public async Task EnableEditor(bool mode)
    {
        await Interop.EnableQuillEditor(
            JsRuntime, _quillElement, mode);
    }

    private string CalculateToolBarClass(Toolbar toolbar)
    {
        var retVal = "toolbar";
       
        if (Theme.Equals(EditorTheme.Bubble))
        {
            return "";
        }

        if (StickyToolBar)
        {
            retVal += " sticky";
        }

        return retVal;
    }

    private string _generatedToolBarId = ConstructToolbarId();

    private static string ConstructToolbarId()
    {
        var random = new Random();
        const string chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        var rando = new string(Enumerable.Repeat(chars, 6)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        return $"toolbar-{rando}";
    }

    private string _editorContainerId = "ql-editor-container";
}

